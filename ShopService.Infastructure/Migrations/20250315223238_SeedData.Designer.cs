// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ShopService.Infrastructure.Data;

#nullable disable

namespace ShopService.Infrastructure.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250315223238_SeedData")]
    partial class SeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ShopService.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7de93e70-d4dc-474a-9059-3ed98db54534"),
                            CustomerId = new Guid("1267ed85-cfad-4296-bce0-966a9365606c"),
                            OrderDate = new DateTime(2025, 3, 15, 22, 32, 38, 350, DateTimeKind.Utc).AddTicks(3466),
                            TotalPrice = 25000.0
                        },
                        new
                        {
                            Id = new Guid("adfb0e4a-e34a-433c-ac8b-65c598438ee9"),
                            CustomerId = new Guid("7256e029-349d-491b-890d-e02d0223c0ab"),
                            OrderDate = new DateTime(2025, 3, 15, 22, 32, 38, 350, DateTimeKind.Utc).AddTicks(3740),
                            TotalPrice = 43000.0
                        });
                });

            modelBuilder.Entity("ShopService.Domain.Entities.OrderProducts", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderProducts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("358d551f-0fcb-4f98-a096-eca9433590cf"),
                            OrderId = new Guid("7de93e70-d4dc-474a-9059-3ed98db54534"),
                            ProductId = new Guid("d29bc0fb-440f-42a2-893c-4abab533337f"),
                            Quantity = 1
                        },
                        new
                        {
                            Id = new Guid("0ea15258-d93e-49a2-bb2d-971fed390632"),
                            OrderId = new Guid("7de93e70-d4dc-474a-9059-3ed98db54534"),
                            ProductId = new Guid("d0890c08-5227-480a-bee0-d392f47c53ec"),
                            Quantity = 1
                        },
                        new
                        {
                            Id = new Guid("f9a11259-9772-40be-b451-a5f0187332b2"),
                            OrderId = new Guid("adfb0e4a-e34a-433c-ac8b-65c598438ee9"),
                            ProductId = new Guid("7d802f1d-6e59-4b0c-99df-8ab2eeaf76b7"),
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("ShopService.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Article")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d29bc0fb-440f-42a2-893c-4abab533337f"),
                            Article = "ASUS-1234",
                            Category = "Електроніка",
                            Name = "Ноутбук ASUS",
                            Price = 25000.0
                        },
                        new
                        {
                            Id = new Guid("7d802f1d-6e59-4b0c-99df-8ab2eeaf76b7"),
                            Article = "SAMS-5678",
                            Category = "Електроніка",
                            Name = "Смартфон Samsung",
                            Price = 18000.0
                        },
                        new
                        {
                            Id = new Guid("d0890c08-5227-480a-bee0-d392f47c53ec"),
                            Article = "LG-91011",
                            Category = "Техніка для дому",
                            Name = "Мікрохвильова піч LG",
                            Price = 7000.0
                        });
                });

            modelBuilder.Entity("ShopService.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1267ed85-cfad-4296-bce0-966a9365606c"),
                            CreatedAt = new DateTime(2025, 3, 15, 22, 32, 38, 349, DateTimeKind.Utc).AddTicks(3448),
                            DateOfBirth = new DateOnly(1990, 5, 15),
                            FullName = "Петренко Петро Петрович"
                        },
                        new
                        {
                            Id = new Guid("7256e029-349d-491b-890d-e02d0223c0ab"),
                            CreatedAt = new DateTime(2025, 3, 15, 22, 32, 38, 349, DateTimeKind.Utc).AddTicks(3640),
                            DateOfBirth = new DateOnly(1985, 10, 20),
                            FullName = "Іваненко Іван Іванович"
                        });
                });

            modelBuilder.Entity("ShopService.Domain.Entities.Order", b =>
                {
                    b.HasOne("ShopService.Domain.Entities.User", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("ShopService.Domain.Entities.OrderProducts", b =>
                {
                    b.HasOne("ShopService.Domain.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShopService.Domain.Entities.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ShopService.Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("ShopService.Domain.Entities.Product", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("ShopService.Domain.Entities.User", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
